// Code for Hello World Program

#include <stdio.h>

int main(void)
{
    printf("hello, world\n");
}

// Code for Marioless Program

#include <cs50.h>
#include <stdio.h>

int main(void)
{
    int height;
    do
    {
        height = get_int("Height: ");
    }
    while (height < 1 || height > 8);

    for (int row = 1; row <= height; row++)
    {
        // Print spaces
        for (int space = 0; space < height - row; space++)
        {
            printf(" ");
        }

        // Print hashes
        for (int hash = 0; hash < row; hash++)
        {
            printf("#");
        }

        // Go to the next line
        printf("\n");
    }
}

// Code for MarioMore Program

#include <cs50.h>
#include <stdio.h>

int main(void)
{
    int height;
    do
    {
        height = get_int("Height: ");
    }
    while (height < 1 || height > 8 );

    // Loop through each row
    for (int i = 1; i<= height; i++)
    {
        // Print left side spaces
        for (int j = 0; j < height - i; j++)
        {
            printf(" ");
        }

        //Print left side hashes
        for (int j = 0; j < i; j++)
        {
            printf("#");
        }

        // Print the gap
        printf("  ");

        // Print right side hashes
        for (int j = 0; j < i; j++)
        {
            printf("#");
        }

        // Move to next line
        printf("\n");
    }
}

// Code for Cash Program
#include <cs50.h>
#include <stdio.h>

int main(void)
{
    // Declare a variable to store the amount of change
    int cents;

    // Keep asking the user for a positive amount of change until they give it
    do
    {
        cents = get_int("Change owed: ");
    }
    while (cents < 0);

    // Count how many coins are used
    int coins = 0;

    // Use as many quarters (25 cents) as possible
    coins += cents / 25;
    cents %= 25;

    // Use as many dimes (10 cents) as possible
    coins += cents / 10;
    cents %= 5;

    // Use the rest as pennies (1 cent)
    coins += cents;

    // Print the total number of coins
    printf("%i\n", coins);
}

// Code for Credit Program

#include <cs50.h>
#include <stdio.h>

int main(void)
{
    // Prompt user for a card number
    long card_number = get_long("Number: ");

    // We'll calculate Luhn’s checksum here
    int sum = 0;

    // We'll also track how many digits the card has
    int digit_count = 0;

    // We'll use a temporary variable so we don’t lose the original number
    long temp = card_number;

    // 1) Luhn's Algorithm
    //    Start from the rightmost digit (position = 1).
    //    Double every 2nd digit, then add the individual digits of the result.

    while (temp > 0)
    {
        int digit = temp % 10;        // Extract the rightmost digit
        digit_count++;                // We're seeing one more digit
        int position = digit_count;   // For readability

        // If position is 2, 4, 6, ... (i.e. every 2nd digit from the right)
        // we double the digit and add its sum of digits
        if (position % 2 == 0)
        {
            digit *= 2;
            // If, say, digit = 14, then (1 + 4) = 5
            sum += (digit % 10) + (digit / 10);
        }
        else
        {
            // Just add the digit as is
            sum += digit;
        }

        temp /= 10;   // Chop off the rightmost digit
    }

    // 2) Check if the total sum is valid (mod 10 == 0)

    if (sum % 10 == 0)
    {
        // If valid, figure out the card’s length and first digits
        int length = digit_count;

        // Find the leading 1 or 2 digits
        long start = card_number;
        while (start >= 100)
        {
            start /= 10;
        }

        // 3) Identify the card type by:
        //    - length (13, 15, or 16)
        //    - first 1-2 digits
        //
        // American Express: 34 or 37, length 15
        // MasterCard:      51–55, length 16
        // Visa:            first digit 4, length 13 or 16

        if ((start == 34 || start == 37) && length == 15)
        {
            printf("AMEX\n");
        }
        else if (start >= 51 && start <= 55 && length == 16)
        {
            printf("MASTERCARD\n");
        }
        else
        {
            // If you only want the first digit, reduce `start` further:
            //    while (start >= 10) { start /= 10; }
            // then check if (start == 4).
            // But this works if we do:
            int first_digit = start / 10;  // If start = 41, dividing by 10 => 4
            // If your code leaves `start` as a single digit, then just do `start == 4`.

            if ((first_digit == 4 || start == 4) && (length == 13 || length == 16))
            {
                printf("VISA\n");
            }
            else
            {
                // Even if Luhn’s passes, if it doesn’t match any known card pattern:
                printf("INVALID\n");
            }
        }
    }
    else
    {
        // Sum fails the check digit test => invalid
        printf("INVALID\n");
    }
    return 0;
}

